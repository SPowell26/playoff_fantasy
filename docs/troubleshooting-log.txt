===============================================================================
                    TROUBLESHOOTING LOG - ESPN API INTEGRATION
===============================================================================
Date: August 11, 2025
Project: Fantasy Playoff Football Application
Goal: Integrate ESPN API to get real NFL player data and stats

===============================================================================
                                PROBLEM #1
===============================================================================
ISSUE: PostgreSQL Command Line Tool Not Recognized
ERROR: 'psql' is not recognized as an internal or external command
ROOT CAUSE: PostgreSQL bin directory not in system PATH
SOLUTION: Added C:\Program Files\PostgreSQL\17\bin to Windows PATH environment variable
NOTES: This was a basic Windows environment setup issue

===============================================================================
                                PROBLEM #2
===============================================================================
ISSUE: PostgreSQL Password Authentication Failed
ERROR: 28P01: password authentication failed for user 'postgres'
ROOT CAUSE: .env file not being read correctly by dotenv
DEBUG STEPS: 
- Added console.log statements to see what was being loaded
- Confirmed DB_PASSWORD: undefined, PORT: undefined
- Checked file location and permissions
SOLUTION: Deleted corrupted .env file and recreated it from scratch using echo commands
NOTES: Environment files can become corrupted with hidden characters/incorrect encoding

===============================================================================
                                PROBLEM #3
===============================================================================
ISSUE: Environment Variables Not Loading
SYMPTOMS: DB_PASSWORD: undefined, PORT: undefined
ROOT CAUSE: Corrupted .env file with hidden characters/incorrect encoding
DEBUG STEPS: 
- Added console.log('DB_PASSWORD:', process.env.DB_PASSWORD)
- Added console.log('PORT:', process.env.PORT)
- Checked current working directory
SOLUTION: Recreated .env file from scratch, resolved the corruption issue
LESSON: Always recreate environment files from scratch if variables aren't loading

===============================================================================
                                PROBLEM #4
===============================================================================
ISSUE: ESPN API Data Import Returning 0 Players
ERROR: "No athletes data from ESPN API"
ROOT CAUSE: Using wrong ESPN API endpoint
INITIAL ENDPOINT: http://site.api.espn.com/apis/site/v2/sports/football/nfl/athletes
WORKING ENDPOINT: https://partners.api.espn.com/v2/sports/football/nfl/athletes?limit=7000
SOLUTION: Updated endpoint in backend/routes/players.js
NOTES: ESPN has multiple API endpoints, some work, some don't

===============================================================================
                                PROBLEM #5
===============================================================================
ISSUE: All Players Being Filtered Out During Import
ERROR: 0 players imported despite API returning data
ROOT CAUSE: Filter looking for athlete.status?.type?.name === 'Active' which didn't exist
DEBUG STEPS: 
- Added extensive console.log statements throughout data transformation pipeline
- Traced each step: checking athlete, transforming athlete, filtering player
- Found that status field was missing from API response
SOLUTION: 
- Removed the status filter (return true;)
- Hardcoded status: 'Active' in transformed player object
NOTES: Debug logging is crucial for understanding data flow issues

===============================================================================
                                PROBLEM #6
===============================================================================
ISSUE: PowerShell curl Command Syntax Error
ERROR: InvalidArgument: A parameter cannot be found that matches parameter name 'X'
ROOT CAUSE: PowerShell's curl is an alias for Invoke-WebRequest and doesn't support -X parameter
SOLUTION: Used Invoke-RestMethod -Uri "..." -Method POST instead
NOTES: PowerShell has different syntax than Unix curl - always use Invoke-RestMethod

===============================================================================
                                PROBLEM #7
===============================================================================
ISSUE: Need Detailed Player Stats for 2024-2025 Playoffs
CHALLENGE: Multiple 404 errors when trying different endpoints
FAILED ATTEMPTS:
- https://sports.core.api.espn.com/v3/sports/football/nfl/scoreboard?dates=20250101-20250215 → 404
- https://sports.core.api.espn.com/v3/sports/football/nfl/scoreboard/{gameId} → 404
WORKING ENDPOINTS FOUND:
- https://partners.api.espn.com/v2/sports/football/nfl/events?dates=20250101-20250215 ✅ (game overviews)
- https://lm-api-reads.fantasy.espn.com/apis/v3/games/ffl/seasons/2024/players?view=mBoxscore ✅ (player stats structure)
- https://lm-api-reads.fantasy.espn.com/apis/v3/games/ffl/seasons/2024/players?view=mLiveScoring ✅ (cleaner format)
NOTES: Need to test endpoints systematically to find working ones

===============================================================================
                                PROBLEM #8
===============================================================================
ISSUE: Stats Objects Appearing Empty in API Responses
SYMPTOM: "stats": {} (empty objects)
ROOT CAUSE: PowerShell truncating output, not showing full depth
SOLUTION: Used ConvertTo-Json -Depth 10 to see full data structure
NOTES: Data depth matters - always use -Depth parameter for complex JSON

===============================================================================
                                PROBLEM #9
===============================================================================
ISSUE: Need to Decode ESPN's Stat Type IDs
CURRENT STATUS: Found actual stat values (e.g., "99": 1.0, "100": 2.0) but need to map these to actual stats
EXAMPLE STATS FOUND:
{
  "99": 1.0,
  "100": 2.0,
  "107": 1.0,
  "108": 4.0,
  "109": 5.0,
  "110": 1.0,
  "111": 1.0,
  "112": 0.5,
  "155": 1.0,
  "210": 1.0
}
NEXT STEP: Find ESPN's stat type reference documentation
NOTES: These numbers are ESPN's internal stat type identifiers

===============================================================================
                                PROBLEM #10
===============================================================================
ISSUE: Need Live, Current-Week NFL Stats
CHALLENGE: Previous endpoints only provided historical data, not current week stats
SOLUTION: Discovered ESPN Game Summary API endpoint
WORKING ENDPOINT: https://site.api.espn.com/apis/site/v2/sports/football/nfl/summary?event={gameId}
ADDITIONAL ENDPOINT: https://site.api.espn.com/apis/site/v2/sports/football/nfl/scoreboard
NOTES: Game Summary API provides detailed player and team stats for individual games

===============================================================================
                                PROBLEM #11
===============================================================================
ISSUE: Complex ESPN API Data Structure
CHALLENGE: ESPN's nested data structure difficult to navigate and map
SOLUTION: Implemented systematic data exploration and mapping functions
APPROACH: 
- Added extensive console.log statements to trace data flow
- Created mapESPNStatsToDatabase() function
- Built processGameForDST() for team defensive stats
- Implemented weekly update endpoint for automation
NOTES: ESPN API structure is complex but navigable with systematic approach

===============================================================================
                                PROBLEM #12
===============================================================================
ISSUE: Player Stats Being Overwritten Between Categories
SYMPTOM: Players appearing in multiple stat categories (e.g., passing + rushing) had stats reset to 0
ROOT CAUSE: mapESPNStatsToDatabase() function reset all stats to 0 for each category
SOLUTION: Modified weekly update logic to merge stats instead of overwriting
IMPLEMENTATION: Find existing player stat object and merge new stats (only update fields > 0)
NOTES: Stat merging prevents data loss when players have multiple stat categories

===============================================================================
                                PROBLEM #13
===============================================================================
ISSUE: Incorrect Passing Yards Mapping
SYMPTOM: Russell Wilson showing 15 yards instead of 108 yards
ROOT CAUSE: Passing yards incorrectly mapped from stats[2] (average) instead of stats[1] (yards)
SOLUTION: Corrected mapESPNStatsToDatabase() to use stats[1] for passing_yards
NOTES: ESPN stats array: [completions/attempts, yards, average, touchdowns, interceptions, sacks, rating]

===============================================================================
                                PROBLEM #14
===============================================================================
ISSUE: Missing Receptions Field in Database Operations
SYMPTOM: Database errors about missing receptions field
ROOT CAUSE: receptions field missing from INSERT and ON CONFLICT clauses
SOLUTION: Added receptions to all database operations for consistency
NOTES: Database schema consistency is crucial for all stat fields

===============================================================================
                                PROBLEM #15
===============================================================================
ISSUE: D/ST Interceptions and Fumble Recoveries Attribution
CHALLENGE: Need to credit defensive teams for opponent's offensive mistakes
ROOT CAUSE: ESPN provides interceptions/fumbles as offensive turnovers by the team
SOLUTION: Implemented opponent swap logic in mapTeamDefenseStats()
IMPLEMENTATION: Get interceptions/fumbles from opponent's team statistics
NOTES: D/ST scoring requires understanding opponent relationships

===============================================================================
                                PROBLEM #16
===============================================================================
ISSUE: Need for Team-Level Defensive Statistics
CHALLENGE: Individual player defensive stats insufficient for D/ST fantasy scoring
SOLUTION: Created team_stats table and implemented team-level stat collection
IMPLEMENTATION: 
- New team_stats table with defensive stat fields
- processGameForDST() function for team processing
- Integration with weekly update endpoint
- Fantasy point calculation using league rules
NOTES: Team-level stats provide more accurate D/ST scoring

===============================================================================
                                KEY LESSONS LEARNED
===============================================================================
1. Environment files can become corrupted - always recreate from scratch if variables aren't loading
2. PowerShell has different syntax than Unix curl - use Invoke-RestMethod for HTTP requests
3. ESPN API has multiple endpoints - some work, some don't, need to test systematically
4. Debug logging is crucial - added extensive console.log statements to trace data flow
5. Data depth matters - use -Depth parameter to see full JSON structures
6. API responses can be complex - need to understand the data structure before processing
7. Always test API endpoints directly before implementing in code
8. Document working endpoints for future reference

===============================================================================
                                CURRENT STATUS
===============================================================================
✅ SOLVED: 
- Database connection and setup
- Player import from ESPN API
- Basic API endpoint discovery
- Environment variable configuration
- ESPN Game Summary API integration
- Live weekly stats collection
- Complete player stat mapping
- D/ST stats collection and processing
- Team defensive statistics
- Fantasy point calculations for all positions
- Weekly automation system
- Database schema for team_stats

🔄 IN PROGRESS: 
- Frontend integration of D/ST stats
- UI updates for complete stat display
- Final scoring engine integration

🎯 NEXT STEPS: 
- Update frontend scoring engine to include D/ST
- Fix player stats modal display
- Update interface for D/ST teams
- Clean up any scoring bugs
- Polish UI/UX for production
- Deploy to production environment

ESTIMATED COMPLETION: 2-4 hours of frontend work remaining

===============================================================================
                                WORKING ENDPOINTS
===============================================================================
1. PLAYERS: https://partners.api.espn.com/v2/sports/football/nfl/athletes?limit=7000
2. EVENTS: https://partners.api.espn.com/v2/sports/football/nfl/events?dates=20250101-20250215
3. BOXSCORE: https://lm-api-reads.fantasy.espn.com/apis/v3/games/ffl/seasons/2024/players?view=mBoxscore
4. LIVE SCORING: https://lm-api-reads.fantasy.espn.com/apis/v3/games/ffl/seasons/2024/players?view=mLiveScoring
5. SCOREBOARD: https://site.api.espn.com/apis/site/v2/sports/football/nfl/scoreboard
6. GAME SUMMARY: https://site.api.espn.com/apis/site/v2/sports/football/nfl/summary?event={gameId}

===============================================================================
                                KEY BREAKTHROUGHS
===============================================================================
1. ESPN GAME SUMMARY API: Provides detailed player and team stats for individual games
2. WEEKLY AUTOMATION: Automatic collection of current week stats for all 32 teams
3. D/ST STATS: Team-level defensive statistics with correct opponent attribution
4. COMPLETE SCORING: Fantasy points calculated for all positions using league rules
5. REAL-TIME DATA: Live updates from ESPN for current NFL games

===============================================================================
                                DEBUGGING COMMANDS
===============================================================================
# Test database connection
psql -U postgres -d fantasy_playoff_db

# Test ESPN API endpoints
Invoke-RestMethod -Uri "https://partners.api.espn.com/v2/sports/football/nfl/athletes?limit=7000"

# Test fantasy API views
Invoke-RestMethod -Uri "https://lm-api-reads.fantasy.espn.com/apis/v3/games/ffl/seasons/2024/players?view=mLiveScoring"

# See full JSON depth
$response | ConvertTo-Json -Depth 10

===============================================================================
                                END OF LOG
===============================================================================
This troubleshooting log documents our complete journey from basic database setup to 
implementing a full ESPN API integration system with live weekly stats collection, 
D/ST processing, and complete fantasy scoring. The key takeaways are:

1. Systematic debugging and testing is essential when working with external APIs
2. ESPN API structure is complex but navigable with proper exploration
3. Team defensive stats require understanding opponent relationships
4. Weekly automation is crucial for fantasy sports applications
5. Proper stat mapping prevents data loss and ensures accuracy

CURRENT STATUS: 85-90% complete with 2-4 hours of frontend work remaining
NEXT PHASE: Frontend integration and UI polish for production deployment 