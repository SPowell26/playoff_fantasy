================================================================================
                    FRONTEND, BACKEND & DATABASE CONCEPTS REFERENCE
================================================================================

================================================================================
                                REACT FRONTEND
================================================================================

üèóÔ∏è CORE REACT CONCEPTS:
- Functional Components - Modern React (using hooks)
- Class Components - Older React (using lifecycle methods)
- JSX - JavaScript XML (HTML-like syntax in JavaScript)
- Props - Data passed from parent to child components
- State - Component's internal data that can change
- Props Drilling - Passing props through multiple component levels

HOOKS (MODERN REACT):
- useState - Manage component state
- useEffect - Handle side effects (API calls, subscriptions)
- useContext - Access global state
- useRef - Reference DOM elements or persist values
- useCallback - Memoize functions to prevent unnecessary re-renders
- useMemo - Memoize expensive calculations
- Custom Hooks - Reusable logic (functions starting with "use")

STATE MANAGEMENT:
Local State:
- Component State - State within a single component
- Lifting State Up - Moving state to parent component
- Controlled Components - Form inputs controlled by React state

Global State:
- Context API - Built-in React state management
- Redux - External state management library
- Zustand - Lightweight state management
- State Provider - Component that provides state to children

DATA FLOW & COMMUNICATION:
Props:
- Prop Types - Type checking for props
- Default Props - Fallback values for props
- Children Props - Content between component tags
- Destructuring - Extracting values from objects/arrays

Events:
- Event Handlers - Functions that respond to user actions
- Event Bubbling - Events propagating up the component tree
- Event Delegation - Handling events at parent level
- Synthetic Events - React's cross-browser event system

STYLING & UI:
CSS Approaches:
- CSS Modules - Scoped CSS classes
- Styled Components - CSS-in-JS library
- Tailwind CSS - Utility-first CSS framework
- CSS-in-JS - Writing CSS in JavaScript
- Inline Styles - Styles as JavaScript objects

UI Concepts:
- Responsive Design - Adapting to different screen sizes
- Component Composition - Building complex UIs from simple components
- Conditional Rendering - Showing/hiding elements based on state
- Lists & Keys - Rendering arrays of components

ROUTING & NAVIGATION:
React Router:
- Browser Router - Router for web applications
- Route - Individual route definition
- Link - Navigation component
- useNavigate - Programmatic navigation
- useParams - Access URL parameters
- Nested Routes - Routes within routes

PERFORMANCE & OPTIMIZATION:
Rendering:
- Virtual DOM - React's lightweight copy of the real DOM
- Reconciliation - Process of updating the DOM
- Re-rendering - Component updating when state/props change
- Memoization - Caching expensive calculations

Optimization:
- React.memo - Prevent unnecessary re-renders
- useMemo - Memoize expensive calculations
- useCallback - Memoize functions
- Code Splitting - Loading components on demand
- Lazy Loading - Loading components when needed

TESTING & DEVELOPMENT:
Testing:
- Jest - JavaScript testing framework
- React Testing Library - Testing React components
- Unit Tests - Testing individual components
- Integration Tests - Testing component interactions
- Mock Functions - Simulating external dependencies

Development Tools:
- React DevTools - Browser extension for debugging
- ESLint - Code linting and formatting
- Prettier - Code formatting
- Hot Reloading - Automatic updates during development

BUILD & DEPLOYMENT:
Build Tools:
- Vite - Modern build tool (what you're using)
- Webpack - Traditional build tool
- Bundling - Combining multiple files into one
- Tree Shaking - Removing unused code
- Minification - Compressing code for production

Deployment:
- Static Hosting - Vercel, Netlify, GitHub Pages
- Environment Variables - Configuration for different environments
- Build Process - Converting development code to production

SECURITY & BEST PRACTICES:
Security:
- XSS Prevention - Cross-site scripting protection
- Input Validation - Validating user input
- Content Security Policy - Security headers
- HTTPS - Secure communication

Best Practices:
- Component Composition - Building reusable components
- Single Responsibility - Each component has one purpose
- DRY Principle - Don't Repeat Yourself
- Separation of Concerns - Keeping logic separate
- Error Boundaries - Catching and handling errors

================================================================================
                                EXPRESS BACKEND
================================================================================

üèóÔ∏è CORE NODE.JS CONCEPTS:
Runtime & Environment:
- Node.js - JavaScript runtime for server-side development
- V8 Engine - Google's JavaScript engine that powers Node.js
- Event Loop - Non-blocking I/O processing
- Single-threaded - One main thread with async operations
- NPM - Node Package Manager
- Package.json - Project configuration and dependencies

Module System:
- CommonJS - require() and module.exports (older)
- ES Modules - import and export (modern, what you're using)
- Module Resolution - How Node.js finds modules
- Package-lock.json - Exact dependency versions

EXPRESS.JS FRAMEWORK:
Core Concepts:
- Express - Web application framework for Node.js
- Middleware - Functions that process requests/responses
- Routing - Defining endpoints and HTTP methods
- Request/Response Cycle - How HTTP requests flow through your app
- Static Files - Serving HTML, CSS, images

HTTP Methods:
- GET - Retrieve data
- POST - Create new data
- PUT - Update existing data
- DELETE - Remove data
- PATCH - Partial updates

Status Codes:
- 200 - OK (success)
- 201 - Created
- 400 - Bad Request
- 401 - Unauthorized
- 404 - Not Found
- 500 - Internal Server Error

REQUEST/RESPONSE HANDLING:
Request Object (req):
- req.body - Request data (JSON, form data)
- req.params - URL parameters (/users/:id)
- req.query - Query string parameters (?name=john)
- req.headers - HTTP headers
- req.cookies - Cookie data
- req.file/files - Uploaded files

Response Object (res):
- res.json() - Send JSON response
- res.send() - Send various data types
- res.status() - Set HTTP status code
- res.redirect() - Redirect to another URL
- res.render() - Render template (if using view engine)

MIDDLEWARE CONCEPTS:
Types of Middleware:
- Application Middleware - Runs on every request
- Router Middleware - Runs on specific routes
- Error Handling Middleware - Catches errors
- Third-party Middleware - External packages (cors, helmet)

Middleware Functions:
// Basic middleware structure
app.use((req, res, next) => {
  // Process request
  next(); // Continue to next middleware
});

Common Middleware:
- cors - Cross-Origin Resource Sharing
- helmet - Security headers
- morgan - HTTP request logging
- express.json() - Parse JSON bodies
- express.urlencoded() - Parse form data

DATABASE CONCEPTS:
Database Types:
- SQL - Structured Query Language (PostgreSQL, MySQL)
- NoSQL - Document-based (MongoDB, Firebase)
- ORM - Object-Relational Mapping (Sequelize, Prisma)
- Query Builder - Knex.js, TypeORM

Database Operations:
- CRUD - Create, Read, Update, Delete
- Migrations - Database schema changes
- Seeds - Initial data population
- Connection Pooling - Managing database connections
- Transactions - Atomic operations

SECURITY CONCEPTS:
Authentication & Authorization:
- JWT - JSON Web Tokens
- Session Management - Server-side session storage
- OAuth - Third-party authentication
- bcrypt - Password hashing
- CORS - Cross-origin security

Security Middleware:
- helmet - Security headers
- express-rate-limit - Rate limiting
- express-validator - Input validation
- sanitization - Cleaning user input
- XSS Protection - Cross-site scripting prevention

API DESIGN:
RESTful APIs:
- REST - Representational State Transfer
- Resource-based URLs - /users, /leagues
- HTTP Methods - GET, POST, PUT, DELETE
- Stateless - No server-side session storage
- JSON - Data format for APIs

API Patterns:
- CRUD Operations - Create, Read, Update, Delete
- Pagination - Limiting response size
- Filtering - Query parameters for filtering
- Sorting - Ordering results
- Error Handling - Consistent error responses

DEVELOPMENT & TESTING:
Development Tools:
- nodemon - Auto-restart on file changes
- dotenv - Environment variables
- ESLint - Code linting
- Prettier - Code formatting
- Postman - API testing tool

Testing:
- Jest - Testing framework
- Supertest - HTTP testing
- Unit Tests - Testing individual functions
- Integration Tests - Testing API endpoints
- Mocking - Simulating external dependencies

DEPLOYMENT & PRODUCTION:
Environment:
- Environment Variables - Configuration for different environments
- Process.env - Accessing environment variables
- Development vs Production - Different configurations
- Logging - Application logs
- Monitoring - Performance tracking

Deployment:
- Heroku - Platform as a Service
- Vercel - Serverless deployment
- Docker - Containerization
- PM2 - Process manager
- Load Balancing - Distributing traffic

================================================================================
                                POSTGRESQL DATABASE
================================================================================

üóÑÔ∏è CORE DATABASE CONCEPTS:
Database Fundamentals:
- RDBMS - Relational Database Management System
- ACID - Atomicity, Consistency, Isolation, Durability
- Normalization - Organizing data to reduce redundancy
- Primary Key - Unique identifier for each row
- Foreign Key - Reference to another table's primary key
- Index - Data structure for faster queries
- Transaction - Group of operations that succeed or fail together

Data Types:
- INTEGER - Whole numbers
- SERIAL - Auto-incrementing integer
- VARCHAR(n) - Variable-length string (max n characters)
- TEXT - Unlimited length string
- BOOLEAN - True/false values
- TIMESTAMP - Date and time
- DATE - Date only
- DECIMAL(p,s) - Fixed-point decimal (precision, scale)
- JSONB - Binary JSON (PostgreSQL specific)

TABLE DESIGN & RELATIONSHIPS:
Table Structure:
- Schema - Database structure/organization
- Column - Individual data field
- Row - Individual record
- Constraint - Rules for data integrity
- Default Value - Value assigned if none provided
- NOT NULL - Column cannot be empty
- UNIQUE - Column values must be unique

Relationships:
- One-to-One - One record relates to exactly one other record
- One-to-Many - One record relates to multiple other records
- Many-to-Many - Multiple records relate to multiple other records
- Referential Integrity - Ensuring foreign keys reference valid data
- CASCADE - Automatic deletion/updates of related records

SQL COMMANDS:
Data Definition Language (DDL):
-- Create table
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL
);

-- Alter table
ALTER TABLE users ADD COLUMN age INTEGER;

-- Drop table
DROP TABLE users;

Data Manipulation Language (DML):
-- Insert data
INSERT INTO users (name, email) VALUES ('John', 'john@email.com');

-- Select data
SELECT * FROM users WHERE age > 18;

-- Update data
UPDATE users SET age = 25 WHERE id = 1;

-- Delete data
DELETE FROM users WHERE id = 1;

Data Query Language (DQL):
-- Basic SELECT
SELECT column1, column2 FROM table_name;

-- WHERE clause
SELECT * FROM users WHERE age > 18 AND city = 'NYC';

-- ORDER BY
SELECT * FROM users ORDER BY name ASC;

-- LIMIT
SELECT * FROM users LIMIT 10;

JOINS & RELATIONSHIPS:
Join Types:
- INNER JOIN - Only matching records from both tables
- LEFT JOIN - All records from left table, matching from right
- RIGHT JOIN - All records from right table, matching from left
- FULL JOIN - All records from both tables
- CROSS JOIN - Cartesian product (every row with every row)

Join Examples:
-- Inner join
SELECT users.name, orders.total 
FROM users 
INNER JOIN orders ON users.id = orders.user_id;

-- Left join
SELECT users.name, orders.total 
FROM users 
LEFT JOIN orders ON users.id = orders.user_id;

AGGREGATION & GROUPING:
Aggregate Functions:
- COUNT() - Count number of rows
- SUM() - Sum of values
- AVG() - Average of values
- MAX() - Maximum value
- MIN() - Minimum value
- GROUP BY - Group results by column
- HAVING - Filter grouped results

Examples:
-- Count users by city
SELECT city, COUNT(*) as user_count 
FROM users 
GROUP BY city;

-- Average order total by user
SELECT user_id, AVG(total) as avg_order 
FROM orders 
GROUP BY user_id 
HAVING AVG(total) > 100;

ADVANCED QUERIES:
Subqueries:
-- Subquery in WHERE
SELECT * FROM users 
WHERE id IN (SELECT user_id FROM orders WHERE total > 100);

-- Subquery in SELECT
SELECT name, (SELECT COUNT(*) FROM orders WHERE user_id = users.id) as order_count 
FROM users;

Common Table Expressions (CTEs):
WITH user_orders AS (
    SELECT user_id, COUNT(*) as order_count 
    FROM orders 
    GROUP BY user_id
)
SELECT users.name, user_orders.order_count 
FROM users 
JOIN user_orders ON users.id = user_orders.user_id;

CONSTRAINTS & INTEGRITY:
Constraint Types:
- PRIMARY KEY - Unique identifier, cannot be null
- FOREIGN KEY - References another table
- UNIQUE - Values must be unique
- CHECK - Custom validation rules
- NOT NULL - Cannot be empty
- DEFAULT - Default value if none provided

Examples:
CREATE TABLE orders (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    total DECIMAL(10,2) CHECK (total > 0),
    status VARCHAR(20) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

PERFORMANCE & OPTIMIZATION:
Indexes:
- B-tree Index - Default index type
- Composite Index - Index on multiple columns
- Partial Index - Index on subset of data
- EXPLAIN - Query execution plan
- Query Optimization - Making queries faster

Index Examples:
-- Create index
CREATE INDEX idx_users_email ON users(email);

-- Composite index
CREATE INDEX idx_orders_user_date ON orders(user_id, created_at);

-- Partial index
CREATE INDEX idx_active_users ON users(id) WHERE status = 'active';

POSTGRESQL SPECIFIC FEATURES:
Advanced Types:
- JSONB - Binary JSON storage
- ARRAY - Array data type
- UUID - Universally unique identifier
- ENUM - Enumeration type
- GEOGRAPHY/GEOMETRY - Spatial data

PostgreSQL Functions:
-- JSON operations
SELECT data->>'name' FROM users WHERE data @> '{"age": 25}';

-- Array operations
SELECT * FROM users WHERE tags && ARRAY['admin', 'moderator'];

-- Date functions
SELECT * FROM orders WHERE created_at > NOW() - INTERVAL '7 days';

DATABASE MANAGEMENT:
Administration:
- psql - PostgreSQL command line tool
- pgAdmin - GUI management tool
- Backup/Restore - pg_dump, pg_restore
- Migrations - Schema version control
- Seeds - Initial data population

Connection Management:
- Connection Pooling - Managing database connections
- Connection String - Database connection parameters
- Environment Variables - Secure configuration
- SSL - Secure connections

================================================================================
                                YOUR APP'S CURRENT USAGE
================================================================================

REACT FRONTEND (What You're Using):
‚úÖ Functional Components with hooks
‚úÖ Context API for global state
‚úÖ React Router for navigation
‚úÖ Tailwind CSS for styling
‚úÖ Vite for building
‚úÖ Component composition (forms in pages)
‚úÖ Props and state management
‚úÖ Event handling (form submissions)

EXPRESS BACKEND (What You're Using):
‚úÖ Express.js framework
‚úÖ ES Modules (import/export)
‚úÖ RESTful API design
‚úÖ Middleware (cors, express.json)
‚úÖ Route handling (GET, POST, PUT, DELETE)
‚úÖ Error handling (try/catch blocks)
‚úÖ JSON responses (res.json())
‚úÖ Environment variables (dotenv)

POSTGRESQL DATABASE (What You're Using):
‚úÖ Relational design (leagues, teams, players tables)
‚úÖ Foreign keys (team_id references teams.id)
‚úÖ Constraints (UNIQUE, NOT NULL)
‚úÖ JSONB (scoring_rules storage)
‚úÖ Timestamps (created_at, updated_at)
‚úÖ Indexes (for performance)
‚úÖ One-to-Many (League ‚Üí Teams)
‚úÖ Many-to-Many (Teams ‚Üî Players via team_rosters)
‚úÖ Cascade deletes (ON DELETE CASCADE)
‚úÖ Composite unique (UNIQUE(league_id, player_id))
‚úÖ Data integrity (manually_updated, source tracking)

================================================================================
                                NEXT STEPS
================================================================================

PHASE 1: DATABASE INTEGRATION
- Execute PostgreSQL schema
- Install pg driver
- Update backend routes to use database
- Test data flow

PHASE 2: ENHANCED FEATURES
- Authentication system
- File uploads
- Real-time updates
- Advanced validation

PHASE 3: PRODUCTION READY
- Error handling
- Logging
- Performance optimization
- Security hardening

================================================================================ 